/*
 * Meetup Management Service API
 *
 * Meetup Management Service API
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace DotNetRu.MeetupManagement.WebApi.Contract.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VenueDraft : IEquatable<VenueDraft>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets MapUrl
        /// </summary>
        [DataMember(Name="MapUrl")]
        public string MapUrl { get; set; }

        /// <summary>
        /// Gets or Sets Meetups
        /// </summary>
        [DataMember(Name="Meetups")]
        public Collection<MeetupReference> Meetups { get; set; }

        /// <summary>
        /// Gets or Sets Speakers
        /// </summary>
        [DataMember(Name="Speakers")]
        public Collection<SpeakerReference> Speakers { get; set; }

        /// <summary>
        /// Gets or Sets Talks
        /// </summary>
        [DataMember(Name="Talks")]
        public Collection<TalkReference> Talks { get; set; }

        /// <summary>
        /// Gets or Sets Friends
        /// </summary>
        [DataMember(Name="Friends")]
        public Collection<FriendReference> Friends { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VenueDraft {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  MapUrl: ").Append(MapUrl).Append("\n");
            sb.Append("  Meetups: ").Append(Meetups).Append("\n");
            sb.Append("  Speakers: ").Append(Speakers).Append("\n");
            sb.Append("  Talks: ").Append(Talks).Append("\n");
            sb.Append("  Friends: ").Append(Friends).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VenueDraft)obj);
        }

        /// <summary>
        /// Returns true if VenueDraft instances are equal
        /// </summary>
        /// <param name="other">Instance of VenueDraft to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VenueDraft other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    MapUrl == other.MapUrl ||
                    MapUrl != null &&
                    MapUrl.Equals(other.MapUrl)
                ) && 
                (
                    Meetups == other.Meetups ||
                    Meetups != null &&
                    Meetups.SequenceEqual(other.Meetups)
                ) && 
                (
                    Speakers == other.Speakers ||
                    Speakers != null &&
                    Speakers.SequenceEqual(other.Speakers)
                ) && 
                (
                    Talks == other.Talks ||
                    Talks != null &&
                    Talks.SequenceEqual(other.Talks)
                ) && 
                (
                    Friends == other.Friends ||
                    Friends != null &&
                    Friends.SequenceEqual(other.Friends)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (MapUrl != null)
                    hashCode = hashCode * 59 + MapUrl.GetHashCode();
                    if (Meetups != null)
                    hashCode = hashCode * 59 + Meetups.GetHashCode();
                    if (Speakers != null)
                    hashCode = hashCode * 59 + Speakers.GetHashCode();
                    if (Talks != null)
                    hashCode = hashCode * 59 + Talks.GetHashCode();
                    if (Friends != null)
                    hashCode = hashCode * 59 + Friends.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VenueDraft left, VenueDraft right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VenueDraft left, VenueDraft right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
